(ns bru-9.geom.generators
  (:require [thi.ng.math.core :as m]
            [thi.ng.geom.vector :as v]
            [bru-9.util :as u]
            [bru-9.field.linear :as fl]
            [bru-9.field.core :as f]
            [bru-9.geom.bezier :as b]
            [thi.ng.math.noise :as n]))

; Highly tweaked generation logic â€“ sculptural, not general.

(defn field-generator [coords params]
  (let [{:keys [random-intensity direction noise-offset
                noise-multiplier]} params
        noise-scale 10.0
        noise-coords (map #(+ noise-offset (/ % noise-scale)) coords)
        noise (-> (apply n/noise3 noise-coords)
                  u/abs
                  (* noise-multiplier)
                  (+ 1.0))]
    (-> direction
        (m/+ (v/randvec3 random-intensity))
        (m/* noise))))

(defn make-directions [initial count]
  (loop [dirs [initial], i count]
    (if (> i 0)
      (recur (conj dirs (m/- (last dirs))) (dec i))
      (rest dirs))))

(defn- noise-offset [] (rand 100))

(defn make-fields [count dimensions direction random-intensity noise]
  (let [dirs (make-directions direction count)
        noise-offset (noise-offset)
        fgen (fn [_ dir] (field-generator _ {:random-intensity random-intensity
                                             :direction dir
                                             :noise-offset noise-offset
                                             :noise-multiplier noise}))
        constructor (fn [dir] (fl/linear-field dimensions #(fgen % dir)))]
    (map constructor dirs)))

(defn make-start-positions-field [dimensions direction random-intensity]
  (let [noise-offset (noise-offset)
        gen #(field-generator % {:random-intensity random-intensity
                                 :direction direction
                                 :noise-offset noise-offset
                                 :noise-multiplier 1.0})]
    (fl/linear-field dimensions gen)))

(defn make-start-positions [field hops mulfn]
  (f/walk field v/V3 hops mulfn))

(defn make-field-splines
  "Returns a collection of splines generated by walking the given fields."
  [fields start-positions mulfn config]
  (let [{:keys [spline-hops-min
                spline-hops-max
                start-positions-random-offset
                curve-tightness-min
                curve-tightness-max
                wander-probability]} config
        offset-starts (map #(m/+ % (v/randvec3 start-positions-random-offset))
                           start-positions)]
    (map #(b/spline-wander fields
                           %
                           (u/rand-int-range spline-hops-min
                                             (inc spline-hops-max))
                           mulfn
                           (u/rand-range curve-tightness-min
                                         curve-tightness-max)
                           wander-probability)
         offset-starts)))